0x000:                      | .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp  #Set up stack pointer
0x00a: 804800000000000000   |     call main           #Execute main program  
0x013: 00                   |     halt                #Terminate program
                            | 
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: b000000000000000     |         .quad 0x0b0
0x028: 000c000000000000     |         .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |         .quad 0x111
0x038: 2202000000000000     |         .quad 0x222
0x040: 3303000000000000     |         .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq src, %rdi   #Move src pointer to %rdi 
0x052: 30f63000000000000000 |     irmovq dest, %rsi  #Move dest pointer to %rsi 
0x05c: 30f20300000000000000 |     irmovq $3, %rdx    #Move Constant 3 to %rdx
0x066: 807000000000000000   |     call copy
0x06f: 90                   |     ret
                            | 
                            | # src = %rdi dest = %rsi len = %rdx
0x070:                      | copy:
0x070: 30f00000000000000000 |     irmovq $0, %rax      #rax = 0
0x07a: 6222                 |     andq   %rdx, %rdx    #judge len
0x07c: 73c000000000000000   |     je done
0x085: 30f80800000000000000 |     irmovq $8, %r8       #Constant 8
0x08f: 30f90100000000000000 |     irmovq $1, %r9       #Constant 1
                            | 
0x099:                      | loop:
0x099: 50a70000000000000000 |     mrmovq (%rdi), %r10   #val = *src
0x0a3: 6087                 |     addq %r8, %rdi #src++ 
0x0a5: 40a60000000000000000 |     rmmovq %r10, (%rsi)   #*dest = val
0x0af: 6086                 |     addq %r8, %rsi #dest++ 
0x0b1: 63a0                 |     xorq %r10, %rax    #result ^= val
0x0b3: 6192                 |     subq %r9, %rdx    #len--
0x0b5: 6222                 |     andq %rdx, %rdx    #judge len
0x0b7: 749900000000000000   |     jne loop
0x0c0:                      | done:
0x0c0: 90                   |     ret
                            | 
                            | #Stack starts here and grows to lower addresses
0x200:                      |     .pos 0x200
0x200:                      | stack:
